spring:
  main:
    allow-circular-references: true

  kafka:
    # bootstrap-servers: ${KAFKA}:9092
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    topic:
      partitions: 3  #${KAFKA_TOPIC_PARTITIONS:3}
      replication-factor: 2 # ${KAFKA_TOPIC_REPLICATION_FACTOR:2}
    admin:
      auto-create: false # 토픽 자동생성은 비활성화 (운영중 불필요한 토픽 생성을 막음)
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 5                          # 적절한 재시도 횟수
      properties:
        retry.backoff.ms: 1000           # 재시도 간격 늘림
        request.timeout.ms: 30000        # 타임아웃 증가
        reconnect.backoff.ms: 1000       # 재연결 백오프 설정
        reconnect.backoff.max.ms: 10000  # 최대 재연결 간격
    consumer:
      auto-offset-reset: earliest
      chat:
        group-id: "chat-${POD_NAME:0}"
      heart:
        group-id: "chat-like-${POD_NAME:0}"
      highlight:
        group-id: "chat-highlight-${POD_NAME:0}"
      participant:
        group-id: "chat-participant-${POD_NAME:0}"
      user-event:
        group-id: "user-event-${POD_NAME:0}"
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
        session.timeout.ms: 45000        # 세션 타임아웃 증가
        heartbeat.interval.ms: 15000     # 하트비트 간격 증가
        max.poll.interval.ms: 300000     # 폴링 간격 최대값 증가
        reconnect.backoff.ms: 1000       # 재연결 백오프 설정
        reconnect.backoff.max.ms: 10000  # 최대 재연결 간격

  elasticsearch:
    uris: http://${ELASTIC_HOST}:${ELASTIC_PORT}
    username: ${ELASTIC_USER}
    password: ${ELASTIC_PASSWORD}
    connection-timeout: 60000  # 30초로 설정
    socket-timeout: 60000      # 소켓 타임아웃도 함께 설정

  application:
    name: grapefield

  jackson:
    time-zone: Asia/Seoul

  datasource:
    url: ${DB_URL}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    driver-class-name: org.mariadb.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: false
    database-platform: org.hibernate.dialect.MariaDBDialect
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_ADDR}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          starttls:
            enable: true
            required: true
          auth: true
          timeout: 5000
  cloud:
    aws:
      credentials:
        access-key: ${AWS_ACCESS_KEY}
        secret-key: ${AWS_SECRET_KEY}
      s3:
        bucket: grapefield-image
      region:
        static: ${SEOUL}
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
    rest:
      detection-strategy: annotated

    elasticsearch:
      repositories:
        enabled: true
      # Spring Boot 3.4.x 설정
      auto-index-creation: false  # 인덱스 자동 생성 비활성화

jwtData:
  secret: ${JWT_SECRET}
  access-expiration: ${ACCESS_EXPIRATION}
  refresh-expiration: ${REFRESH_EXPIRATION}

springdoc:
  swagger-ui:
    tags-sorter: alpha   # 태그를 알파벳 기준으로 정렬 (숫자 포함 가능)

file:
  upload:
    path: ${FILEPATH}

management:
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    db:
      enabled: true
    mail:
      enabled: false
    diskspace:
      enabled: false
    ping:
      enabled: false
    ssl:
      enabled: false

logging:
  level:
    org.springframework.web.socket: DEBUG
    org.springframework.web.socket.sockjs: DEBUG
    com.example.grapefield.config.filter.JwtHandshakeInterceptor: DEBUG
    # Elasticsearch 디버깅 추가
    org.springframework.data.elasticsearch: DEBUG
    org.elasticsearch: DEBUG
    com.example.grapefield.elasticsearch: DEBUG
#    org.hibernate.SQL: DEBUG
#    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
textcortex:
  key: "${TEXTCORTEX_API_KEY}"